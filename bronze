import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Player {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // game loop
        List<Unit> wrecks = new ArrayList<>();
        List<Unit> tankers = new ArrayList<>();
        List<Unit> oilPool = new ArrayList<>();
        Map<Integer, Unit> myUnits = new HashMap<>();
        Map<Integer, Unit> firstEnemyUnits = new HashMap<>();
        Map<Integer, Unit> secondEnemyUnits = new HashMap<>();
        while (true) {
            myUnits.clear();
            wrecks.clear();
            tankers.clear();
            oilPool.clear();
            int myScore = in.nextInt();
            int enemyScore1 = in.nextInt();
            int enemyScore2 = in.nextInt();
            int myRage = in.nextInt();
            int enemyRage1 = in.nextInt();
            int enemyRage2 = in.nextInt();
            int unitCount = in.nextInt();
            for (int i = 0; i < unitCount; i++) {
                int unitId = in.nextInt();
                int unitType = in.nextInt();
                int player = in.nextInt();
                float mass = in.nextFloat();
                int radius = in.nextInt();
                int x = in.nextInt();
                int y = in.nextInt();
                int vx = in.nextInt();
                int vy = in.nextInt();
                int extra = in.nextInt();
                int extra2 = in.nextInt();
                Unit u = new Unit(unitId, unitType, player, radius, vx, vy, extra, extra2, x, y, mass);
                if (unitType == 4){
                    wrecks.add(u);
                } else if (unitType == 3){
                    tankers.add(u);
                } else if (unitType == 6){
                    oilPool.add(u);
                }
                if (player == 0){
                    myUnits.put(unitType, u);
                } else if (player == 1) {
                    firstEnemyUnits.put(unitType, u);
                } else if (player == 2){
                    secondEnemyUnits.put(unitType, u);
                }
            }

            
            Unit bestReaperEnemy = enemyScore1 > enemyScore2 ? firstEnemyUnits.get(0) : secondEnemyUnits.get(0);
            Unit myReaper = myUnits.get(0);
            Unit myDestroyer = myUnits.get(1);
            Unit myDoof = myUnits.get(2);
            Unit reaperTarget = myDestroyer;

            for (Unit w: wrecks){
                w.myReaper = myReaper;
                w.firstEnemyReaper = firstEnemyUnits.get(0);
                w.secondEnemyReaper = secondEnemyUnits.get(0);
            }
            Collections.sort(wrecks, (a, b) -> compareDist(a, b));

            //looking for reaper targets
            double max = 10000;
            for (Unit u: wrecks){
                double d = myReaper.pos.dist(u.pos);
                if(d < max){
                    reaperTarget = u;
                    max = d;
                }
            }

            //looking for destroyer targets
            max = 10000;
            Unit destroyerTarget = bestReaperEnemy;
            for (Unit u: tankers){
                double d = myReaper.pos.dist(u.pos);
                if(d < max){
                    destroyerTarget = u;
                    max = d;
                }
            }

            //looking for doof targets
            Unit doofTarget = bestReaperEnemy;
            boolean spell = false;
            if (myRage > 30){
                for (Unit w: wrecks) {
                    if (w.pos.dist(bestReaperEnemy.pos) < w.radius && myDoof.pos.dist(w.pos) < 2000){
                        boolean oilOnPool = false;
                        for(Unit o: oilPool){
                            if (o.pos.dist(w.pos) < o.radius) {
                                oilOnPool = true;
                                break;
                            }
                        }
                        if (!oilOnPool) {                    
                        doofTarget = w;
                        spell = true;
                        break;
                        }
                    }
                }
            }

            System.out.println((reaperTarget.pos.x - myReaper.vx) + " " + (reaperTarget.pos.y - myReaper.vy) + " 300" + " reaper");
            System.out.println(destroyerTarget.pos.x + " " + destroyerTarget.pos.y + " 300" + " destroyer");
            if (spell){
                System.out.println("SKILL " + doofTarget.pos.x + " " + doofTarget.pos.y + " doof");
            }else{
                System.out.println(doofTarget.pos.x + " " + doofTarget.pos.y + " 300" + " doof");
            }
        }
    }
    public static int compareDist(Unit a, Unit b){
        return a.pos.dist(a.myReaper.pos) / (a.pos.dist(a.firstEnemyReaper.pos) + a.pos.dist(a.secondEnemyReaper.pos))  < b.pos.dist(b.myReaper.pos) / (b.pos.dist(b.firstEnemyReaper.pos) + b.pos.dist(b.secondEnemyReaper.pos)) ? -1 : 1;
    }

}
class Unit {
    public int id, type, player, radius, vx, vy, extra, extra2;
    public double mass;
    public Pos pos = null;
    public Unit myReaper = null;
    public Unit firstEnemyReaper = null;
    public Unit secondEnemyReaper = null;
    public Unit(int id, int type, int player, int radius, int vx, int vy, int extra, int extra2, int x, int y, double mass){
        this.id = id;
        this.type = type;
        this.player = player;
        this.radius = radius;
        this.vx = vx;
        this.vy = vy;
        this.extra = extra;
        this.extra2 = extra2;
        this.pos = new Pos(x, y);
        this.mass = mass;
    }
    @Override
    public String toString(){
        return "id " + id;
    }
}
class  Pos {
    public int x, y;
    public Pos(int x, int y){
        this.x = x;
        this.y = y;
    }
    
    public double dist(Pos a){
        return Math.sqrt((x - a.x) * (x - a.x) + (y - a.y) * (y - a.y));
    }
}
